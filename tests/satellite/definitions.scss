$s: 1.5em;
$step_t: $s/15;
$step_s: $s * 0.25;
$step_m: $s * 0.5;
$step_l: $s;
$step_b: $s * 2;
$theta: 35.264deg;
$phi: 45deg;
$transform_rot_x_neg_iso: rotateX(-$theta);
$transform_rot_x_pos_iso: rotateX($theta);
$transform_rot_y_neg_iso: rotateY(-$phi);
$transform_rot_y_pos_iso: rotateY($phi);
$transform_rot_y_neg_iso_big: rotateY(-$phi - 360);
$transform_rot_y_pos_iso_big: rotateY($phi + 360);
$transform_rot_x_neg_90: rotateX(-90deg);
$transform_rot_x_pos_90: rotateX(90deg);
$transform_rot_x_neg_45: rotateX(-45deg);
$transform_rot_x_pos_45: rotateX(45deg);
$transform_rot_y_neg_90: rotateY(-90deg);
$transform_rot_y_pos_90: rotateY(90deg);
$transform_rot_y_neg_45: rotateY(-45deg);
$transform_rot_y_pos_45: rotateY(45deg);
$transform_x_neg_t: translateX(-$step_t);
$transform_x_neg_s: translateX(-$step_s);
$transform_x_neg_m: translateX(-$step_m);
$transform_x_neg_l: translateX(-$step_l);
$transform_x_pos_t: translateX($step_t);
$transform_x_pos_s: translateX($step_s);
$transform_x_pos_m: translateX($step_m);
$transform_x_pos_l: translateX($step_l);
$transform_x_pos_b: translateX($step_b);
$transform_x_pos_b2: translateX($step_b*2);
$transform_y_neg_s: translateY(-$step_s);
$transform_y_neg_m: translateY(-$step_m);
$transform_y_neg_l: translateY(-$step_l);
$transform_y_pos_s: translateY($step_s);
$transform_y_pos_m: translateY($step_m);
$transform_y_pos_l: translateY($step_l);
$transform_z_pos_s: translateZ($step_s);
$transform_z_pos_m: translateZ($step_m);
$transform_z_pos_l: translateZ($step_l);
$transform_z_pos_b: translateZ($step_b);
$transform_z_neg_s: translateZ(-$step_s);
$transform_z_neg_m: translateZ(-$step_m);
$transform_z_neg_l: translateZ(-$step_l);
$transform_z_neg_b: translateZ(-$step_b);
$transform_z_neg_b2: translateZ(-$step_b*2);
$transform_x_pos_50pc: translateX(50%);
$transform_x_neg_50pc: translateX(-50%);
$transform_y_neg_50pc: translateY(-50%);
$transform_z_neg_50: translateZ(-0.5em);
$scale: scale(1.24);
$spin: $transform_rot_x_neg_iso $transform_rot_y_pos_iso_big;
$aspin: $transform_rot_y_neg_iso_big $transform_rot_x_pos_iso;
$rot: 36s;
$trans: 0.3s;



@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	   -moz-border-radius: $radius;
	    -ms-border-radius: $radius;
	        border-radius: $radius;
}
@mixin transition($transition) {
	-webkit-transition: $transition;
	   -moz-transition: $transition;
	    -ms-transition: $transition;
	     -o-transition: $transition;
	        transition: $transition;
}
@mixin transform($transform) {
	-webkit-transform: $transform;
	   -moz-transform: $transform;
	    -ms-transform: $transform;
	     -o-transform: $transform;
	        transform: $transform;
}
@mixin transform-style($transform) {
	-webkit-transform-style: $transform;
	        transform-style: $transform;
}
@mixin transform-origin($origin) {
	-webkit-transform-origin: $origin;
	   -moz-transform-origin: $origin;
	    -ms-transform-origin: $origin;
	     -o-transform-origin: $origin;
	        transform-origin: $origin;
}
@mixin box-sizing($sizing) {
	-webkit-box-sizing: $sizing;
	   -moz-box-sizing: $sizing;
	        box-sizing: $sizing;
}
@mixin box-shadow($shadow){
	-webkit-box-shadow: $shadow;
	   -moz-box-shadow: $shadow;
	        box-shadow: $shadow;
}
@mixin animation-duration($d) {
	-webkit-animation-duration: $d;
	   -moz-animation-duration: $d;
	        animation-duration: $d;
}
@mixin animation-fill-mode($mode) {
	-webkit-animation-fill-mode: $mode;
	   -moz-animation-fill-mode: $mode;
	     -o-animation-fill-mode: $mode;
	        animation-fill-mode: $mode;
}
@mixin animation-iteration-count($count) {
	-webkit-animation-iteration-count: $count;
	   -moz-animation-iteration-count: $count;
	        animation-iteration-count: $count;
}
@mixin animation-timing-function($fn){
	-webkit-animation-timing-function: $fn;
	   -moz-animation-timing-function: $fn; 
	        animation-timing-function: $fn;
}
@mixin animation-name($name){
	-webkit-animation-name: $name;
	   -moz-animation-name: $name;
	        animation-name: $name;
}
@mixin animation-delay($d){
	-webkit-animation-delay: $d;
	   -moz-animation-delay: $d;
	     -o-animation-delay: $d;
	        animation-delay: $d;
}
@mixin background-gradient($c1,$c2){
	background: $c1;
	background-image:-webkit-linear-gradient(top,$c1,$c2);
	background-image:-moz-linear-gradient(top,$c1,$c2);
	background-image:-ms-linear-gradient(top,$c1,$c2);
	background-image:-o-linear-gradient(top,$c1,$c2);
	background-image:linear-gradient(to bottom,$c1,$c2);
}
@mixin fader($c1,$o1,$c2,$o2){
	$rgba1: rgba($c1,$o1);
	$rgba2: rgba($c2,$o2);
	$ie-hex-str1: ie-hex-str($rgba1);
	$ie-hex-str2: ie-hex-str($rgba2);
	background: -moz-linear-gradient(left, $rgba1 0%, $rgba2 100%); /* FF3.6-15 */
	background: -webkit-linear-gradient(left, $rgba1 0%, $rgba2 100%); /* Chrome10-25,Safari5.1-6 */
	background: linear-gradient(to right, $rgba1 0%, $rgba2 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=$ie-hex-str1, endColorstr=$ie-hex-str2,GradientType=1 ); /* IE6-9 */
}
@mixin cylinder($c1,$o1,$c2,$o2,$c3,$o3){
	$rgba1: rgba($c1,$o1);
	$rgba2: rgba($c2,$o2);
	$rgba3: rgba($c3,$o3);
	$ie-hex-str1: ie-hex-str($rgba1);
	$ie-hex-str2: ie-hex-str($rgba3);
	background: rgb(211,211,211); /* Old browsers */
	background: -moz-linear-gradient(left, $rgba1 0%, $rgba2 30%, $rgba3 100%); /* FF3.6-15 */
	background: -webkit-linear-gradient(left, $rgba1 0%,$rgba2 30%,$rgba3 100%); /* Chrome10-25,Safari5.1-6 */
	background: linear-gradient(to right, $rgba1 0%,$rgba2 30%,$rgba3 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=$ie-hex-str1, endColorstr=$ie-hex-str2,GradientType=1 ); /* IE6-9 */
}

@mixin flex($d,$auto){
 	 -webkit-flex: $d $auto;
	  -webkit-box: $d $auto;
	     -moz-box: $d $auto;
	     -ms-flex: $d $auto;
	         flex: $d $auto;
}
@mixin display-flex(){
	display: flex;
}
@mixin flex-column() {
	flex-direction: column;
}
@mixin flex-row() {
	flex-direction: row;
}
@mixin triangle-r($w,$h,$c){
	width: 0;
	height: 0;
	border-style: solid;
	border-width: $h*0.5 $w $h*0.5 0;
	border-color: transparent $c transparent transparent;
	line-height: 0px;
	_border-color: #000000 $c #000000 #000000;
	_filter: progid:DXImageTransform.Microsoft.Chroma(color='#000000');
}
@mixin triangle-l($w,$h,$c){
	width: 0;
	height: 0;
	border-style: solid;
	border-width: $h*0.5 0 $h*0.5 $w;
	border-color: transparent transparent transparent $c;
	line-height: 0px;
	_border-color: #000000 #000000 #000000 $c;
	_filter: progid:DXImageTransform.Microsoft.Chroma(color='#000000');
}